[{"content":"測試各種新玩具\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\n\r\r\r\r\rvar container, rect;\rvar camera, scene, renderer, clock;\rvar uniforms;\rvar mouse = {x:0, y:0};\rconst clamp = (num, min, max) = Math.min(Math.max(num, min), max);\rinit();\ranimate();\rfunction init() {\rcontainer = document.getElementById( 'container' );\rcamera = new THREE.Camera();\rcamera.position.z = 1;\rscene = new THREE.Scene();\rclock = new THREE.Clock();\rvar geometry = new THREE.PlaneBufferGeometry( 2, 2 );\runiforms = {\ru_time: { type: \"f\", value: 1.0 },\ru_mouse: { type: \"v2\", value: new THREE.Vector2() },\ru_resolution: { type: \"v2\", value: new THREE.Vector2() }\r};\rvar material = new THREE.ShaderMaterial( {\runiforms: uniforms,\rvertexShader: 'void main() \\r\\n{\\r\\n gl_Position = vec4(position, 1.0);\\r\\n}',\rfragmentShader: '\\n#ifdef GL_ES\\nprecision mediump float;\\n#endif\\n\\nuniform vec2 u_resolution;\\nuniform vec2 u_mouse;\\nuniform float u_time;\\n\\n#define deg2rad 0.0174532925;\\n\\nvec2 uvRotate(vec2 uv, float degree)\\n{\\n float radian = degree * deg2rad;\\n vec2 ihat = uv.x * vec2(cos(radian), sin(radian));\\n vec2 jhat = uv.y * vec2(-sin(radian), cos(radian));\\n\\n return ihat \\u002b jhat;\\n}\\nfloat rect(vec2 uv, vec2 position, float rotate, vec2 size)\\n{\\n uv = uv - position;\\n uv = uvRotate(uv, rotate);\\n\\n vec2 dist = abs(uv) - size;\\n\\n return max(dist.x, dist.y);\\n}\\nvec4 frag(vec2 uv, vec2 mouse)\\n{\\n uv = (uv - 0.5) * 2.0;\\n mouse = (mouse - 0.5) * 2.0;\\n\\n float scale = 10.0;\\n uv = uv * scale;\\n mouse = mouse * scale;\\n \\n float dist = 100.0;\\n dist = min(dist, rect(uv, mouse, u_time * 50.0, vec2(3, 1)));\\n dist = min(dist, rect(uv, mouse, u_time * 50.0, vec2(1, 3)));\\n dist = ceil(dist);\\n\\n return vec4(dist, dist, dist, 1);\\n}\\nvoid main() \\n{\\n vec2 uv = gl_FragCoord.xy \\/ u_resolution.xy;\\n vec2 mouse = u_mouse \\/ u_resolution.xy;\\n\\n gl_FragColor = frag(uv, mouse);\\n}\\n\\n\\n'\r} );\rvar mesh = new THREE.Mesh( geometry, material );\rscene.add( mesh );\rrenderer = new THREE.WebGLRenderer();\rrenderer.setPixelRatio( window.devicePixelRatio );\rcontainer.appendChild( renderer.domElement );\rcontainer.classList.add('shader-container');\ronWindowResize();\rwindow.addEventListener( 'resize', onWindowResize, false );\rwindow.addEventListener( 'mousemove', updateMouse, false );\r}\rfunction onWindowResize( event ) {\rvar maxWidth = container.parentElement.clientWidth;\rvar canvasWidth = '300';\rvar canvasHeight = '300';\rvar ratio = Math.min(maxWidth, canvasWidth) / canvasWidth;\rrenderer.setSize(canvasWidth * ratio, canvasHeight * ratio); uniforms.u_resolution.value.x = renderer.domElement.width;\runiforms.u_resolution.value.y = renderer.domElement.height;\rrect = container.getBoundingClientRect();\r}\rfunction updateMouse( event )\r{\rmouse.x = event.clientX - rect.left;\rmouse.y = rect.height - (event.clientY - rect.top) - window.scrollY;\rmouse.x = clamp(mouse.x, 0, rect.width);\rmouse.y = clamp(mouse.y, 0, rect.height);\runiforms.u_mouse.value.x = mouse.x;\runiforms.u_mouse.value.y = mouse.y;\r}\rfunction animate() {\rrequestAnimationFrame( animate );\rrender();\r}\rfunction render() {\runiforms.u_time.value += clock.getDelta();\rrenderer.render( scene, camera );\r}\r\rline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\nline\n","date":"2022-03-14","permalink":"https://angus945.github.io/post/shadertesting/","tags":["test","shader"],"title":"重新施工中~~~~"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}   To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions   Examples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2020-03-08","permalink":"https://angus945.github.io/post/math-typesetting/","tags":null,"title":"Math Typesetting"}]