[{"content":"測試各種新玩具\ncccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc\nHALL\r[300 300]\r\r\r\r.shader-container\r{\rmax-width: fit-content;\rmargin-left: auto;\rmargin-right: auto;\r}\r void main() {\rgl_Position = vec4(position, 1.0);\r}\r\runiform vec2 u_resolution; uniform vec2 u_mouse; uniform float u_time; void main() { vec2 st = gl_FragCoord.xy / u_resolution.xy; gl_FragColor=vec4(st.x, st.y,0.0,1.0); } \r\rvar container;\rvar camera, scene, renderer, clock;\rvar uniforms;\rvar mouse = {x:0, y:0};\rdocument.onmousemove = getMouseXY;\rinit();\ranimate();\rfunction getMouseXY(e) {\rmouse.x = e.pageX;\rmouse.y = e.pageY;\r}\rfunction init() {\rcontainer = document.getElementById( 'container' );\rcamera = new THREE.Camera();\rcamera.position.z = 1;\rscene = new THREE.Scene();\rclock = new THREE.Clock();\rvar geometry = new THREE.PlaneBufferGeometry( 2, 2 );\runiforms = {\ru_time: { type: \"f\", value: 1.0 },\ru_mouse: { type: \"v2\", value: new THREE.Vector2() },\ru_resolution: { type: \"v2\", value: new THREE.Vector2() }\r};\rvar material = new THREE.ShaderMaterial( {\runiforms: uniforms,\rvertexShader: document.getElementById( 'vertexShader' ).textContent,\rfragmentShader: document.getElementById( 'fragmentShader' ).textContent\r} );\rvar mesh = new THREE.Mesh( geometry, material );\rscene.add( mesh );\rrenderer = new THREE.WebGLRenderer();\rrenderer.setPixelRatio( window.devicePixelRatio );\rcontainer.appendChild( renderer.domElement );\rcontainer.classList.add('shader-container');\ronWindowResize();\rwindow.addEventListener( 'resize', onWindowResize, false );\r}\rfunction onWindowResize( event ) {\rvar maxWidth = container.parentElement.clientWidth;\rvar canvasWidth = '300';\rvar canvasHeight = '300';\rvar ratio = Math.min(maxWidth, canvasWidth) / canvasWidth;\rrenderer.setSize(canvasWidth * ratio, canvasHeight * ratio); uniforms.u_resolution.value.x = renderer.domElement.width;\runiforms.u_resolution.value.y = renderer.domElement.height;\runiforms.u_mouse.value.x = mouse.x;\runiforms.u_mouse.value.y = mouse.y;\r}\rfunction animate() {\rrequestAnimationFrame( animate );\rrender();\r}\rfunction render() {\runiforms.u_time.value += clock.getDelta();\rrenderer.render( scene, camera );\r}\r\r","date":"2022-03-14","permalink":"https://angus945.github.io/post/shadertesting/","tags":["test","shader"],"title":"重新施工中~~~~"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\n Create a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so:  {{ if or .Params.math .Site.Params.math }} {{ partial \u0026quot;math.html\u0026quot; . }} {{ end }}   To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files.  Note: Use the online reference of Supported TeX Functions   Examples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2020-03-08","permalink":"https://angus945.github.io/post/math-typesetting/","tags":null,"title":"Math Typesetting"}]